#!/bin/env bash
#set -e;
set -u;


function main {
    args=$(getopt hn "$@");
    if [ $? != 0 ]; then
        echo getopt arguments ERROR: $this $@;
        usage;
        exit 1;
    fi;
    set -- $args;
    export doit=true;
    while true; do {
        case $1 in
            -h) usage; exit 0;;
            -n) doit=false; shift;;
            --) shift;;
            *)  break;;
        esac;
    }; done;

    for stack in $@; do {

        aws cloudformation describe-stacks --stack-name $stack >/dev/null 2>&1 ||
        {
            echo $stack DELETE_COMPLETE;
            continue; # no stack is a pass
        }

        cmd="aws cloudformation delete-stack --stack-name $stack";
        echo "#"$cmd;

        if $doit; then
            read -p "$WARN_PROMPT" really_doit;
            if [ _"$really_doit" != _"y" ]; then
                echo Not really going to do it;
                doit=false;
            fi;
        fi;

        echo -n $stack" ";
        if $doit; then
            eval $cmd;
            w84stack $stack || continue;
        else
            aws --output text cloudformation describe-stacks --stack-name $stack --query 'Stacks[].StackStatus';
        fi | tee $stack_status_file;

        if grep -q DELETE_COMPLETE $stack_status_file; then
            continue;
        elif grep -q UPDATE_COMPLETE $stack_status_file; then
            echo -n $stack" ";
            aws --output text cloudformation describe-stacks --stack-name $stack --query 'Stacks[].StackStatusReason';
            continue;
        else
            w84stack $stack >/dev/null || continue;
        fi;

        aws --output text cloudformation describe-stack-resources --stack-name $stack \
            --query 'StackResources[?ResourceStatus!=`DELETE_COMPLETE`].[ResourceType,PhysicalResourceId]' \
            >$tmpfile 2>/dev/null || continue;
        #use tmpfile so xargs will pass stdin; otherwise xargs redirects stdin from /dev/null
        xargs -a $tmpfile -n 2 bash -c 'delete_this "$@"' $this;

        $doit && eval $cmd;
        echo -n $stack" ";
        w84stack $stack || continue;

    }; done;
}; # function main

function usage {
    echo "
    USAGE:
        $this -h # print this usage and exit
        $this stack-name ... # delete list of stacks and all associated resources
        $this -n stack-name ... # not-really; print how to delete list of stacks and all associated resources
    ";
};

function detach_policies {
   role=$1;
   policies=$(aws --output text iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[].[PolicyArn]'); 
   for policy in $policies; do
      cmd="aws iam detach-role-policy --role-name $role --policy-arn $policy";
      echo "#"$cmd; $doit && eval $cmd >/dev/null;
   done;
}; # function detach_policies
export -f detach_policies;

function delete_this {
    case $1 in

        AWS::CloudFormation::Stack)
            nested_stack=$(echo $2 | cut -d/ -f2);
            cmd=$this;
            $doit || cmd="$cmd -n";
            cmd="$cmd $nested_stack";
            echo "#"$cmd; eval $cmd;
            ;;

        AWS::EC2::InternetGateway)
            cmd="aws ec2 delete-internet-gateway --internet-gateway-id $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::EC2::SecurityGroup)
            cmd="aws ec2 delete-security-group --group-id $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::EC2::Subnet)
            cmd="aws ec2 delete-subnet --subnet-id $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::EC2::VPC)
            cmd="aws ec2 delete-vpc --vpc-id $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::EC2::VPCGatewayAttachment)
            cmd="aws ec2 delete-vpn-gateway --vpn-gateway-id $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::ECR::Repository)
            cmd="aws ecr delete-repository --force --repository-name $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::IAM::InstanceProfile)
            cmd="aws iam delete-instance-profile --instance-profile-name $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::IAM::Role)
            detach_policies $2 >/dev/null;
            cmd="aws iam delete-role --role-name $2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        AWS::S3::Bucket)
            cmd="aws s3 rb --force s3://$2";
            echo "#"$cmd; $doit && eval $cmd >/dev/null;
            ;;

        *) echo ERROR: $this does not know how to delete \"$*\";;
    esac;
}; # function delete_this
export -f delete_this;

export stack_status_file=$(mktemp);
export tmpfile=$(mktemp);
trap "rm -f $tmpfile $stack_status_file" EXIT;

export WARN_PROMPT="WARNING: Are you sure you really want to delete all resources for this stack: [yN] ";
export this=$(basename $0);
main "$@";

